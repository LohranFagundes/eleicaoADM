@{
    ViewData["Title"] = "Teste de Restri√ß√µes - Elei√ß√µes Lacradas";
}

<div class="container-fluid mt-4">
    <h2 class="mb-4"><i class="bi bi-shield-lock me-2"></i>@ViewData["Title"]</h2>

    <div class="row">
        <div class="col-md-6">
            <div class="card">
                <div class="card-header">
                    <h5 class="mb-0">Status das Elei√ß√µes</h5>
                </div>
                <div class="card-body">
                    <div id="electionStatus">
                        <p class="text-muted">Verificando status das elei√ß√µes...</p>
                    </div>
                </div>
            </div>
        </div>
        
        <div class="col-md-6">
            <div class="card">
                <div class="card-header">
                    <h5 class="mb-0">A√ß√µes de Teste</h5>
                </div>
                <div class="card-body">
                    <div class="d-grid gap-2">
                        <a href="/Election/Create" class="btn btn-primary">
                            <i class="bi bi-plus-circle me-2"></i>Criar Elei√ß√£o (Deve ser Bloqueado)
                        </a>
                        <a href="/Candidate/Create" class="btn btn-success">
                            <i class="bi bi-person-plus me-2"></i>Criar Candidato (Deve ser Bloqueado)
                        </a>
                        <a href="/Position/Create" class="btn btn-info">
                            <i class="bi bi-briefcase me-2"></i>Criar Cargo (Deve ser Bloqueado)
                        </a>
                        <a href="/Voter/List" class="btn btn-secondary">
                            <i class="bi bi-people me-2"></i>Listar Eleitores (Permitido)
                        </a>
                        <button class="btn btn-warning" onclick="testPasswordReset()">
                            <i class="bi bi-key me-2"></i>Redefinir Senha (Permitido)
                        </button>
                        <a href="/Report/Index" class="btn btn-dark">
                            <i class="bi bi-file-text me-2"></i>Relat√≥rios (Permitido)
                        </a>
                    </div>
                </div>
            </div>
        </div>
    </div>

    <div class="row mt-4">
        <div class="col-12">
            <div class="card">
                <div class="card-header">
                    <h5 class="mb-0">Log de Testes</h5>
                </div>
                <div class="card-body">
                    <div id="testLog" class="border rounded p-3" style="height: 200px; overflow-y: auto; background-color: #f8f9fa;">
                        <p class="text-muted mb-0">Aguardando testes...</p>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>

<script>
    document.addEventListener('DOMContentLoaded', async function() {
        await updateElectionStatus();
        logMessage('‚úÖ Sistema de teste carregado');
        
        // Test restrictions after page load
        setTimeout(testRestrictions, 1000);
    });

    async function updateElectionStatus() {
        try {
            const response = await fetch('/Election/GetSealedElectionsStatus');
            if (response.ok) {
                const result = await response.json();
                const statusDiv = document.getElementById('electionStatus');
                
                if (result.hasSealedElections) {
                    statusDiv.innerHTML = `
                        <div class="alert alert-danger">
                            <i class="bi bi-shield-lock me-2"></i>
                            <strong>Elei√ß√µes Lacradas Detectadas!</strong><br>
                            IDs das elei√ß√µes lacradas: <code>${result.sealedElectionIds.join(', ')}</code><br>
                            <small>Restri√ß√µes ativas - apenas consultas e redefini√ß√£o de senhas permitidas.</small>
                        </div>
                    `;
                    logMessage('üîí Elei√ß√µes lacradas detectadas: ' + result.sealedElectionIds.join(', '));
                } else {
                    statusDiv.innerHTML = `
                        <div class="alert alert-success">
                            <i class="bi bi-shield-check me-2"></i>
                            <strong>Nenhuma Elei√ß√£o Lacrada</strong><br>
                            Todas as funcionalidades est√£o dispon√≠veis.
                        </div>
                    `;
                    logMessage('‚úÖ Nenhuma elei√ß√£o lacrada - sistema liberado');
                }
            }
        } catch (error) {
            logMessage('‚ùå Erro ao verificar status: ' + error.message);
        }
    }

    function testPasswordReset() {
        logMessage('üîë Teste de redefini√ß√£o de senha - Esta a√ß√£o deve ser PERMITIDA');
        alert('Esta √© uma funcionalidade permitida mesmo com elei√ß√µes lacradas!');
    }

    function testRestrictions() {
        logMessage('üß™ Iniciando testes de restri√ß√µes...');
        
        // Test button restrictions
        const restrictedButtons = document.querySelectorAll('a[href*="/Create"]');
        let restrictedCount = 0;
        
        restrictedButtons.forEach(btn => {
            if (btn.classList.contains('disabled') || btn.style.pointerEvents === 'none') {
                restrictedCount++;
            }
        });
        
        logMessage(`üìä Bot√µes restritos encontrados: ${restrictedCount}/${restrictedButtons.length}`);
        
        // Test allowed buttons
        const allowedButtons = document.querySelectorAll('.btn-warning, .btn-secondary, .btn-dark');
        let allowedCount = 0;
        
        allowedButtons.forEach(btn => {
            if (!btn.classList.contains('disabled') && btn.style.pointerEvents !== 'none') {
                allowedCount++;
            }
        });
        
        logMessage(`‚úÖ Bot√µes permitidos encontrados: ${allowedCount}/${allowedButtons.length}`);
        
        if (window.hasSealedElections) {
            logMessage('üéØ Status: Sistema corretamente restrito para elei√ß√µes lacradas');
        } else {
            logMessage('üéØ Status: Sistema liberado - nenhuma elei√ß√£o lacrada');
        }
    }

    function logMessage(message) {
        const log = document.getElementById('testLog');
        const timestamp = new Date().toLocaleTimeString();
        const logEntry = document.createElement('div');
        logEntry.className = 'mb-1';
        logEntry.innerHTML = `<small class="text-muted">[${timestamp}]</small> ${message}`;
        log.appendChild(logEntry);
        log.scrollTop = log.scrollHeight;
    }

    // Test manual actions
    document.querySelectorAll('a[href*="/Create"]').forEach(link => {
        link.addEventListener('click', function(e) {
            e.preventDefault();
            logMessage('üö´ Tentativa de acesso bloqueada: ' + this.textContent.trim());
            alert('A√ß√£o bloqueada: Esta funcionalidade n√£o est√° dispon√≠vel quando h√° elei√ß√µes lacradas.');
        });
    });
</script>